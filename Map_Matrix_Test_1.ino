#include "FastLED.h"
#define NUM_LEDS 298
#define DATA_PIN 11
#define LED_TYPE WS2812
#define COLOR_ORDER GRB

CRGB leds[298];

const int xpos[] PROGMEM = {
  2813,
2747,
2681,
2616,
2550,
2485,
2419,
2354,
2288,
2223,
2157,
2091,
2026,
1960,
1895,
1829,
1764,
1698,
1633,
1567,
1502,
1436,
1370,
1305,
1239,
1174,
1108,
1043,
977,
912,
846,
780,
715,
649,
584,
518,
453,
387,
322,
256,
191,
125,
125,
191,
256,
322,
387,
453,
518,
584,
649,
715,
780,
846,
912,
977,
1043,
1108,
1174,
1239,
1305,
1370,
1436,
1502,
1567,
1633,
1698,
1764,
1829,
1895,
1960,
2026,
2091,
2157,
2223,
2288,
2354,
2419,
2485,
2550,
2616,
2681,
2747,
2812,
2812,
2747,
2681,
2616,
2550,
2485,
2419,
2354,
2288,
2223,
2157,
2091,
2026,
1960,
1895,
1829,
1764,
1698,
1633,
1567,
1502,
1436,
1370,
1305,
1239,
1174,
1108,
1043,
977,
912,
846,
780,
715,
649,
584,
518,
453,
387,
322,
256,
191,
125,
125,
191,
256,
322,
387,
453,
518,
584,
649,
715,
780,
846,
912,
977,
1043,
1108,
1174,
1239,
1305,
1370,
1436,
1502,
1567,
1633,
1698,
1764,
1829,
1895,
1960,
2025,
125,
191,
256,
322,
387,
453,
518,
584,
649,
715,
780,
846,
912,
977,
1043,
1108,
1174,
1239,
1305,
1370,
1436,
1502,
1567,
1633,
1698,
1764,
1829,
1895,
1960,
2026,
125,
191,
256,
322,
387,
453,
518,
584,
649,
715,
780,
846,
912,
977,
1043,
1108,
1174,
1239,
1305,
1370,
1436,
1502,
1567,
1633,
1698,
1764,
1829,
1895,
1960,
2026,
125,
191,
256,
322,
387,
453,
518,
584,
649,
715,
780,
846,
912,
977,
1043,
1108,
1174,
1239,
1305,
1370,
1436,
1502,
1567,
1633,
1698,
1764,
1829,
1895,
1960,
2026,
2125,
2125,
2125,
2125,
2125,
2125,
2194,
2194,
2194,
2194,
2194,
2194,
2263,
2263,
2263,
2263,
2263,
2263,
2319,
2319,
2319,
2319,
2319,
2319,
2388,
2388,
2388,
2388,
2388,
2388,
2450,
2450,
2450,
2450,
2450,
2450,
2550,
2550,
2550,
2550,
2550,
2613,
2678,
2744,
2813,
2813,
2813,
2813,
2813,
2738,
2672,
2606
};
const int ypos[] PROGMEM = {
  138,
138,
138,
138,
138,
138,
138,
138,
138,
138,
138,
138,
138,
138,
138,
138,
138,
138,
138,
138,
138,
138,
138,
138,
138,
138,
138,
138,
138,
138,
138,
138,
138,
138,
138,
138,
138,
138,
138,
138,
138,
138,
250,
250,
250,
250,
250,
250,
250,
250,
250,
250,
250,
250,
250,
250,
250,
250,
250,
250,
250,
250,
250,
250,
250,
250,
250,
250,
250,
250,
250,
250,
250,
250,
250,
250,
250,
250,
250,
250,
250,
250,
250,
250,
388,
388,
388,
388,
388,
388,
388,
388,
388,
388,
388,
388,
388,
388,
388,
388,
388,
388,
388,
388,
388,
388,
388,
388,
388,
388,
388,
388,
388,
388,
388,
388,
388,
388,
388,
388,
388,
388,
388,
388,
388,
388,
513,
513,
513,
513,
513,
513,
513,
513,
513,
513,
513,
513,
513,
513,
513,
513,
513,
513,
513,
513,
513,
513,
513,
513,
513,
513,
513,
513,
513,
513,
650,
650,
650,
650,
650,
650,
650,
650,
650,
650,
650,
650,
650,
650,
650,
650,
650,
650,
650,
650,
650,
650,
650,
650,
650,
650,
650,
650,
650,
650,
775,
775,
775,
775,
775,
775,
775,
775,
775,
775,
775,
775,
775,
775,
775,
775,
775,
775,
775,
775,
775,
775,
775,
775,
775,
775,
775,
775,
775,
775,
913,
913,
913,
913,
913,
913,
913,
913,
913,
913,
913,
913,
913,
913,
913,
913,
913,
913,
913,
913,
913,
913,
913,
913,
913,
913,
913,
913,
913,
913,
875,
809,
744,
678,
613,
547,
547,
613,
678,
744,
809,
875,
875,
809,
744,
678,
613,
547,
547,
613,
678,
744,
809,
875,
875,
809,
744,
678,
613,
547,
547,
613,
678,
744,
809,
875,
838,
772,
706,
641,
575,
575,
575,
575,
575,
641,
706,
772,
838,
838,
838,
838
};

int r = 200;      // radius of circle
int h = 1400;     // x starting center of circle
int k = 450;    // y starting center of circle
int xspeed = 80;
int yspeed = 30;


void setup() { 
  delay(2000); // power-up safety delay 
  FastLED.addLeds<NEOPIXEL, 11>(leds, NUM_LEDS); 
  FastLED.setBrightness(50);
  FastLED.setMaxPowerInVoltsAndMilliamps(5,1500);
  set_max_power_indicator_LED(13);

  Serial.begin(9600);                                        // Initialize serial port for debugging.

  
}

void loop() {

  // Distance from point to a circle
  //  ∣(x1−h)2+(y1−k)2‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾√−r∣∣∣
  // abs(sqrt((x-h)^2 + (y-k)^2) - r)

  

  for (int i = 0; i < NUM_LEDS; i++) {
    int x = pgm_read_word_near(xpos + i);                            // retrive the coordinates of each pixel
    int y = pgm_read_word_near(ypos + i);

    long xdist = pow(x-h, 2);
    long ydist = pow(y-k, 2);

    int square = sqrt(xdist + ydist);

    int distance = (square - r);

    if (distance < 0){
      distance = distance * -1;
    }

    // long distance = abs(sqrt( long sq(x-h) + sq(y-k) ) - r);  // calculate the distance of the pixel from the circle
    
    CRGB this_color;                                      // create a variable for the color

    // Set each pixel to the correct color (close to the circle is white)
    if (distance < 50) {
      this_color = CRGB(255, 255, 255);
      } else {
        this_color = CRGB(0, 0, 0);
      } 

    // Use the method to change the color of the pixel
    turnOnOneLight(this_color, i);
  }

  // Show the led strip
  FastLED.show();

  if (h + xspeed > 2800 && xspeed > 0) {
      xspeed = xspeed * -1;
      } 

  if (h + xspeed < 200 && xspeed < 0) {
      xspeed = xspeed * -1;
      } 

  if (k + yspeed > 800 && yspeed > 0) {
      yspeed = yspeed * -1;
      } 

  if (k + yspeed < 200 && yspeed < 0) {
      yspeed = yspeed * -1;
      } 

  h =  h + xspeed;
  k =  k + yspeed;

}

// Change the color of one pixel
void turnOnOneLight(CRGB color, int index){
    // Simple function to change the color of a LED and display the strip
    // Input an RGB color and the index of the light to change

    // Change the color of the led at this index
    leds[index] = color;
    
}
